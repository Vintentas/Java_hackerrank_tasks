/*
https://www.hackerrank.com/challenges/swap-nodes-algo/problem?h_r=internal-search
*/



import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    //*************
    
    static class Node{       
        int data;
        int depth;
        Node left = null;
        Node right = null;
        
        Node(int data, int depth){
            this.data = data;
            this.depth = depth;
        }        
    }
    
    static int[][] swapNodes(int[][] indexes, int[] queries) {
        
        int[][] result = new int[queries.length][indexes.length];
        Node root = new Node (1, 1);
        
        HashMap <Integer, Node> mapNodes = new HashMap <> ();        
        mapNodes.put(1, root);
        
        for (int i = 0; i < indexes.length; i++){
            int leftIndex = indexes[i][0];
            int rightIndex = indexes[i][1];
            Node node = mapNodes.get(i+1);
            if (leftIndex != -1){
                node.left = new Node(leftIndex, node.depth+1);
                mapNodes.put(leftIndex, node.left);
            }
            if (rightIndex != -1){
                node.right = new Node(rightIndex, node.depth+1);
                mapNodes.put(rightIndex, node.right);
            }
        }
                                
        for (int i = 0; i < queries.length; i++){            
            
            swap(root, 1, queries[i]);
            
            ArrayList<Integer> alList = new ArrayList <> (indexes.length);
            inOrder(root, alList);
            for (int j = 0; j < indexes.length; j++)   
            result[i][j] = alList.get(j);
        }

        return  result;
    }
    
    static void inOrder(Node node, List<Integer> result) {
        
        if (node == null) {
            return ;
        }

        inOrder(node.left, result);    
        result.add(node.data);
        inOrder(node.right, result);        
    }
    
      static void swap(Node node, int depth, int k) {

        if (node == null) {
            return ;
        }

        swap(node.left, depth + 1, k);
        swap(node.right, depth + 1, k);

        if (depth >=k && depth % k == 0 ) {
            Node n = node.left;
            node.left = node.right;
            node.right = n;
        }

    }
    
    //*************

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(scanner.nextLine().trim());

        int[][] indexes = new int[n][2];

        for (int indexesRowItr = 0; indexesRowItr < n; indexesRowItr++) {
            String[] indexesRowItems = scanner.nextLine().split(" ");

            for (int indexesColumnItr = 0; indexesColumnItr < 2; indexesColumnItr++) {
                int indexesItem = Integer.parseInt(indexesRowItems[indexesColumnItr].trim());
                indexes[indexesRowItr][indexesColumnItr] = indexesItem;
            }
        }

        int queriesCount = Integer.parseInt(scanner.nextLine().trim());

        int[] queries = new int[queriesCount];

        for (int queriesItr = 0; queriesItr < queriesCount; queriesItr++) {
            int queriesItem = Integer.parseInt(scanner.nextLine().trim());
            queries[queriesItr] = queriesItem;
        }

        int[][] result = swapNodes(indexes, queries);

        for (int resultRowItr = 0; resultRowItr < result.length; resultRowItr++) {
            for (int resultColumnItr = 0; resultColumnItr < result[resultRowItr].length; resultColumnItr++) {
                bufferedWriter.write(String.valueOf(result[resultRowItr][resultColumnItr]));

                if (resultColumnItr != result[resultRowItr].length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            if (resultRowItr != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
