/*
https://www.hackerrank.com/challenges/java-priority-queue/problem?h_r=internal-search
*/

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.PriorityQueue;

/*
 * Create the Student and Priorities classes here.
 */

class Student implements Comparable<Student>{

    int id;
    String name;
    double cgpa;

    public Student(int id, String name, double cgpa){
        this.id = id;
        this.name = name;
        this.cgpa = cgpa;
    }

    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    public double getCgpa() {
        return cgpa;
    }

    @Override
    public int compareTo(Student that) {

        if(this.cgpa == that.cgpa){
            if(this.name.equals(that.name)){
                return Integer.compare(this.id, that.id);
            }
            return this.name.compareTo(that.name);
        }
        return Double.compare(that.cgpa, this.cgpa);
    }
}

class Priorities{

    List<Student> getStudents(List<String> events){

        PriorityQueue <Student> priorityQueue = new PriorityQueue<>(events.size());

        for (String event: events){
            String [] query = event.split(" ");

            if (query[0].equals("ENTER")){
                Student student = new Student( Integer.parseInt(query[3]),
                                               query[1],
                                               Double.parseDouble(query[2]));
                priorityQueue.offer(student);
            }
            if (query[0].equals("SERVED") && (!priorityQueue.isEmpty())) {
                priorityQueue.poll();
            }
        }

        List<Student> resultListStudents = new ArrayList<>();

        if (!priorityQueue.isEmpty()) {
            while (!priorityQueue.isEmpty()) {
                resultListStudents.add(priorityQueue.poll());
            }
        }

        return resultListStudents;
    }

}

public class Solution {
    private final static Scanner scan = new Scanner(System.in);
    private final static Priorities priorities = new Priorities();
    
    public static void main(String[] args) {
        int totalEvents = Integer.parseInt(scan.nextLine());    
        List<String> events = new ArrayList<>();
        
        while (totalEvents-- != 0) {
            String event = scan.nextLine();
            events.add(event);
        }
        
        List<Student> students = priorities.getStudents(events);
        
        if (students.isEmpty()) {
            System.out.println("EMPTY");
        } else {
            for (Student st: students) {
                System.out.println(st.getName());
            }
        }
    }
}
