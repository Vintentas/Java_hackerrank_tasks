/*
https://www.hackerrank.com/challenges/tree-level-order-traversal/problem?h_r=internal-search
*/



import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

    /* 
    
    class Node 
        int data;
        Node left;
        Node right;
    */
    public static void levelOrder(Node root) {
    
        int h = height(root);
        
        for (int i=0; i<=h; i++){
            printlevelOrder (root, i);          
        }        
    }

    public static void printlevelOrder(Node root, int hight){
        
        if (root == null) 
            return;
        if (hight == 0)
            System.out.print(root.data + " ");
        else{
            printlevelOrder(root.left, hight-1);
            printlevelOrder(root.right, hight-1);
        }
        
    }

    public static int height(Node root) {
        int hl = 0;
        int hr = 0;
        
        if (root.right != null)
            hr = height(root.right)+1;
        
        if (root.left != null)
            hl = height(root.left)+1;
                     
       return ((hr > hl) ? hr : hl); 
    }


	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        levelOrder(root);
    }	
}
