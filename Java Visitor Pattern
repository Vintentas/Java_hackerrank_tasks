/*
https://www.hackerrank.com/challenges/java-vistor-pattern/problem?h_r=internal-search
*/


import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    int sum=0;
    
    @Override
    public int getResult() {
        return sum;
    }
    
    @Override
    public void visitNode(TreeNode node) {
    }
    
    @Override
    public void visitLeaf(TreeLeaf leaf) {
          sum+=leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    private long result = 1;
    private final int M = 1000000007;
    
    @Override
    public int getResult() {
        return (int) result;
    }
    
    @Override
    public void visitNode(TreeNode node) {
        if(node.getColor().equals(Color.RED)) {
            result = (result * node.getValue()) % M;
        }
    }

    @Override
    public void visitLeaf(TreeLeaf leaf) {
        if(leaf.getColor().equals(Color.RED)) {
            result = (result * leaf.getValue()) % M;
        }
    }
}

class FancyVisitor extends TreeVis {
    
    int sumNonLeafEvenDepth = 0;
    int sumGreenLeaf = 0;
    
    @Override
    public int getResult() {
        return Math.abs(sumNonLeafEvenDepth-sumGreenLeaf);
    }

    @Override
    public void visitNode(TreeNode node) {
        if((node.getDepth()%2)==0){
            sumNonLeafEvenDepth += node.getValue();
        }
    }

    @Override
    public void visitLeaf(TreeLeaf leaf) {
        if(leaf.getColor()==Color.GREEN){
            sumGreenLeaf += leaf.getValue();
        }
    }
}

public class Solution {

private static int value[];
private static Color color[];
private static Map<Integer, Set<Integer>> nodesMap = new HashMap<>();

public static Tree solve() {

    Scanner in = new Scanner(System.in);

    int n = in.nextInt();

    value = new int[n];
    for(int i = 0; i < n; i++) {
        value[i] = in.nextInt();
    }

    color = new Color[n];
    for(int i = 0; i < n; i++) {
        color[i] = (in.nextInt() == 0) ? Color.RED : Color.GREEN;
    }

    Tree rootNode;
    if(n == 1) {
        rootNode = new TreeLeaf(value[0], color[0], 0);
    }
    else {
        for(int i = 0; i < (n - 1); i++) {
            int u = in.nextInt();
            int v = in.nextInt();
            Set<Integer> uEdges = nodesMap.get(u);
            if(uEdges == null) {
                uEdges = new HashSet<>();
            }
            uEdges.add(v);
            nodesMap.put(u, uEdges);
            Set<Integer> vEdges = nodesMap.get(v);
            if(vEdges == null) {
                vEdges = new HashSet<>();
            }
            vEdges.add(u);
            nodesMap.put(v, vEdges);
        }

        rootNode = new TreeNode(value[0], color[0], 0);
        Set<Integer> rootEdges = nodesMap.get(1);
        
        Iterator<Integer> rootIterator = rootEdges.iterator();
        while(rootIterator.hasNext()) {
            Integer nodeIdentifier = rootIterator.next();
            nodesMap.get(nodeIdentifier).remove(1);
            createEdge(rootNode, nodeIdentifier);
        }
    }

    return rootNode;
}

private static void createEdge(Tree parentNode, Integer nodeIdentifier) {

    Set<Integer> nodeEdges = nodesMap.get(nodeIdentifier);
    boolean hasChild = false;
    if(nodeEdges != null && !nodeEdges.isEmpty())
        hasChild = true;

    if(hasChild) {
        TreeNode node = new TreeNode(value[nodeIdentifier - 1], 
                                     color[nodeIdentifier - 1], 
                                     parentNode.getDepth() + 1);
        ((TreeNode) parentNode).addChild(node);
        
        Iterator<Integer> nodeIterator = nodeEdges.iterator();
        while(nodeIterator.hasNext()) {
            Integer neighborNodeIdentifier = nodeIterator.next();
            nodesMap.get(neighborNodeIdentifier).remove(nodeIdentifier);
            createEdge(node, neighborNodeIdentifier);
        }
    }
    else {
        TreeLeaf leaf = new TreeLeaf(value[nodeIdentifier - 1], 
                                     color[nodeIdentifier - 1], 
                                     parentNode.getDepth() + 1);
        ((TreeNode) parentNode).addChild(leaf);
    }
}


    public static void main(String[] args) {
      	Tree root = solve();
		SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
      	ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
      	FancyVisitor vis3 = new FancyVisitor();

      	root.accept(vis1);
      	root.accept(vis2);
      	root.accept(vis3);

      	int res1 = vis1.getResult();
      	int res2 = vis2.getResult();
      	int res3 = vis3.getResult();

      	System.out.println(res1);
     	System.out.println(res2);
    	System.out.println(res3);
	}
}
