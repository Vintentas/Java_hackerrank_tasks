/*
https://www.hackerrank.com/challenges/largest-rectangle/problem
*/


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the largestRectangle function below.
    static long largestRectangle(int[] h) {
         
        Stack<Integer> stack = new Stack<>();
        int count = 0;
        int result = 0;
        
        int i = 0;
        stack.push(i);
        while (!stack.empty() || i < h.length){
        
            if (i < h.length && (stack.empty() || h[stack.peek()] <= h[i])){
                stack.push(i++);
            }
            else{
                int top = stack.pop();
                count = h[top] * (stack.empty() ? i : (i - stack.peek() - 1));
                
                if (result < count) result = count;
            }    
        }
        
        return result;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] h = new int[n];

        String[] hItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int hItem = Integer.parseInt(hItems[i]);
            h[i] = hItem;
        }

        long result = largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
