/*
https://www.hackerrank.com/challenges/equal-stacks/problem?h_r=internal-search
*/




import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the equalStacks function below.
     */
    static int equalStacks(int[] h1, int[] h2, int[] h3) {
        /*
         * Write your code here.
         */
  
        LinkedList<Integer> ll1 = new LinkedList<>();
        int hight1 = 0;
        for (int i = 0; i < h1.length; i++){
               ll1.add(h1[i]);
               hight1 += h1[i];
        }
        
        LinkedList<Integer> ll2 = new LinkedList<>();
        int hight2 = 0;
        for (int i = 0; i < h2.length; i++){
               ll2.add(h2[i]);
               hight2 += h2[i];
        }
        
        LinkedList<Integer> ll3 = new LinkedList<>();
        int hight3 = 0;
        for (int i = 0; i < h3.length; i++){
               ll3.add(h3[i]);
               hight3 += h3[i];
        }

        while (h1.length != 0 && h2.length != 0 && h3.length != 0){
                
            if (hight1 == hight2 && hight1 == hight3){
                return hight1;    
            }
        
            if (hight1 >= hight2 && hight1 > hight3){
                int n = ll1.remove();  
                hight1 -= n;  
            }
            else if ( hight2 >= hight3){
                int n = ll2.remove();  
                hight2 -= n; 
            }
            else{
                int n = ll3.remove();  
                hight3 -= n; 
            }            
        }              
        return 0;
    }
    //**************************

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] n1N2N3 = scanner.nextLine().split(" ");

        int n1 = Integer.parseInt(n1N2N3[0].trim());

        int n2 = Integer.parseInt(n1N2N3[1].trim());

        int n3 = Integer.parseInt(n1N2N3[2].trim());

        int[] h1 = new int[n1];

        String[] h1Items = scanner.nextLine().split(" ");

        for (int h1Itr = 0; h1Itr < n1; h1Itr++) {
            int h1Item = Integer.parseInt(h1Items[h1Itr].trim());
            h1[h1Itr] = h1Item;
        }

        int[] h2 = new int[n2];

        String[] h2Items = scanner.nextLine().split(" ");

        for (int h2Itr = 0; h2Itr < n2; h2Itr++) {
            int h2Item = Integer.parseInt(h2Items[h2Itr].trim());
            h2[h2Itr] = h2Item;
        }

        int[] h3 = new int[n3];

        String[] h3Items = scanner.nextLine().split(" ");

        for (int h3Itr = 0; h3Itr < n3; h3Itr++) {
            int h3Item = Integer.parseInt(h3Items[h3Itr].trim());
            h3[h3Itr] = h3Item;
        }

        int result = equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
