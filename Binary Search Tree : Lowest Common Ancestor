/*
https://www.hackerrank.com/challenges/binary-search-tree-lowest-common-ancestor/problem?h_r=internal-search
*/



import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

/*
    class Node 
        int data;
        Node left;
        Node right;
    */
    public static Node lca (Node root,int v1, int v2){
            // Write your code here.

            //if (node != null)

            Node node = null;

            if (ancestor(root, v1) && ancestor(root, v2)) {
                node = root;
            }

            if (root.left != null) {
                Node n = lca(root.left, v1, v2);
                if (n != null)
                    node = n;
            }
            if (root.right != null) {
                Node n = lca(root.right, v1, v2);
                if (n != null)
                    node = n;
            }

            return node;
        }

        public static boolean ancestor (Node root,int v){

            if (root.data == v) return true;
            if (root.left == null && root.right == null) return false;

            boolean left = false;
            boolean right = false;

            if (root.left != null) {
                left = ancestor(root.left, v);
            }
            if (root.right != null) {
                right = ancestor(root.right, v);
            }

            return left || right;
        }
	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
      	int v1 = scan.nextInt();
      	int v2 = scan.nextInt();
        scan.close();
        Node ans = lca(root,v1,v2);
        System.out.println(ans.data);
    }	
}
